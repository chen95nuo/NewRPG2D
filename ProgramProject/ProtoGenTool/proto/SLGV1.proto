
message BaseData {
    optional int32 code = 1; 
    extensions 100 to 9999;  
}  

//--------------------------------------------RQ RS消息定义分割线----------------------------------------

//开始游戏
message RQ_StartGame {  
    required string token = 1;		//从用户中心登陆获得的token
    extend BaseData {  
        optional RQ_StartGame ext = 101;
    } 
}
message RS_StartGame {  
	required int32 ret = 1;			//0:成功 -1:失败
    optional int32 state = 2;  		//0:未创建角色名  1:已创建角色名 2:禁止登陆
    extend BaseData {
        optional RS_StartGame ext = 102;  
    }
} 

//登录游戏<拉取游戏数据>
message RQ_RoleLogin {  
    extend BaseData {
        optional RQ_RoleLogin ext = 103;  
    }
}
message RS_RoleLogin { 
	required int32 ret = 1;			//0:成功 -1:失败
	optional CharacterInfo userInfo=2; // 角色信息
	repeated RoomInfo allRoom=3;// 所有房间 基础信息
	repeated ResidentInfo allResident=4 ;//所有居民
	repeated ProduceRoom allProRoom=5;// 生产类房间
	repeated StoreRoom  allStoreRoom=6;// 存储类房间
	repeated ResidentRoom  allResidentRoom=7;// 居民室
	repeated ProduceEquipInfo proEquip=8;// 武器厂和护甲厂正在生产或已经完成生产的装备(未领取)
	optional AllMagicSkillInfo allMagicSkill=9;// 魔法工厂生产和投入战斗使用的法术 以及魔法实验室研制法术最高等级
	optional Box boxs=10;// 背包库
	extend BaseData {
        optional RS_RoleLogin ext = 104;  
    }
}
// 角色信息
message CharacterInfo{
	required int32 roleId = 1;			//角色ID
	optional int32 userId = 2;			//用户ID
	optional string roleName = 3;		//角色名称
	optional string headimgurl = 4;		//头像[设置中应用图标的顺序数据数字]
	optional int32 feNum=5;				//铁矿数量
	optional int32 woodNum = 6;			//木材数量
	optional int32 magicNum = 7;		//魔力数量
	optional int32 appNum = 8;			//苹果数量
	optional int32 gold = 9;			//金币
	optional int32 diamond = 10;		//钻石
	optional int32 lv = 11;				//等级<待定>
	optional int32 power = 12;			//战力
	optional int32 grailNum = 13;		//圣杯数量
	optional int32 popNum = 14;			//人口或者居民数量
	optional int32 builderNum = 15;		//建筑工人数量
	repeated int32 castleSkin=16;		// 城堡的皮肤 [背景,天气,桥梁,旗帜,砖瓦,墙壁,窗户]
	optional int32 loginDays=17;		// 角色登录天数
	repeated string thirdAcctInfo=18;   //  faceBook.Twitter,手机.... 如未绑定无此字段
	optional int32 stageId=19;			// 当前关卡进度 读表 初始值 10001 ; 通关关卡 99999
	
}

//创建角色名称
message RQ_CreateRoleName {  
	required string roleName = 1;		//昵称
	extend BaseData {  
        optional RQ_CreateRoleName ext = 105;
    } 
}

message RS_CreateRoleName {  
	required int32 ret = 1;				//0:成功 -1:失败(失败具体原因在常量描述中)
	optional CharacterInfo userInfo=2; // 角色信息
	extend BaseData {  
        optional RS_CreateRoleName ext = 106;
    } 
}

//---------------房间信息开始---
// 房间信息 楼梯也算在内<统一抽象房间-通用房间>
message RoomInfo{
	required string roomId=1;// 房间Id 类型+ 01/02/04...
	required int32  id=2;// 读表ID
	repeated int32  xFloorOriginOffset=3;// 所在楼层和起点网格 例如[1,2] 在一层 从第2个网格开始
	optional int32  leftTime=4;// 剩余多少时间完成升级任务 0 表示升级成功 >0 还有多少时间完成下一级升级 单位为秒
	repeated int32  residents=5;// 屋子里面的居民 [居民1,居民2....] 
}
// 推送 房间信息
message A_RoomInfo{
	required A_RoomInfo roomInfo=1; // 房间
	extend BaseData {
        optional A_RoomInfo ext = 2001;
    }
}

//发送建造的房间的表ID 判断材料是否足够
message RQ_CheckCreateNewRoom{
	required int32 roomId=1; // 房间读表id 
	extend BaseData {
        optional RQ_CheckCreateNewRoom ext = 107;
    }
}
//返回是否可以建造 缺乏材料数量
message RS_CheckCreateNewRoom{
	required int32 ret=1;//0:成功 -1:失败(失败具体原因在常量描述中)
	repeated ConsumeItem neeedItem = 2;//数组 玩家不足的材料数量 材料类型 数量
	extend BaseData {
        optional RS_CheckCreateNewRoom ext = 108  ;
    }
}
//材料中包括钻石 用于提示需要多少钻石才能购买该数量材料
message ConsumeItem{
	required int32 produceType = 1;//材料类型 0钻石 1金币 2食物 3......
	required int32 needNum = 2;//需要数量
}
//创建一个生产类房间
message RQ_CreateNewRoom{
	required int32 roomType=1; // 7 :伐木场<服务自动生成对应 房间逻辑Id ;01 ,02 ,04>
	repeated int32 xFloorOriginOffset=2;// 所在楼层和起点网格和偏移网格 例如[1,2,3] 在一层 从第2个网格开始占了3个格子
	extend BaseData {
        optional RQ_CreateNewRoom ext = 109;  
    }
}
message RS_CreateNewRoom{
	required int32 ret=1;//0:成功 -1:失败(失败具体原因在常量描述中)
	optional RoomInfo baseRoomInfo=2;// 房屋基本信息
	
	extend BaseData {
        optional RS_CreateNewRoom ext = 110;  
    }
}


// 具体各个功能性房间<生成类(和存储类)5个级别属性, 训练类职业的.,居民室,支援类>
// 1.1 生产类(和存储类)房间
message ProduceRoom{
	required string roomId=1;// 房间Id 类型+ 01/02/04...
	optional int32  toBeCollected=2;//[待收资源] 仅对于生成类房间
	optional int32  speedProd=3;// 产出速度(居民影响值,基础值不传)
}

message StoreRoom{
	required string roomId=1;// 房间Id 类型+ 01/02/04...
	required int32  depot=2;// 仓库数据	
}
//推送
message  A_ProduceRoom{
	repeated ProduceRoom proRoom=1;
	extend BaseData {
        optional A_ProduceRoom ext = 2002;  
    }
}
//推送
message  A_StoreRoom{
	repeated StoreRoom storeRoom=1;
	extend BaseData {
        optional A_StoreRoom ext = 2003;  
    }
}


// 以下是功能性房间-------------------------
  
//1.3居住室 <增加人口>
// 居民室  <生产居民的房间>
message  ResidentRoom{
	required string roomId=1;// 房间Id 07 01
	repeated int32  residentIds=2;  //  屋子里面的居民 [居民1,居民2....]
	repeated int32  appointmentTimes=3;//开始时间[时间1,时间2...]
	repeated int32  state=4;// 同性-1,异性,(恋爱(才显示时间),怀孕,厌倦爱情)  
}
// 检查 房间状态信息 [客户端和服务器同步消息 ]消息返回  A_ResidentRoom
message Q_CheckResidentRoomState {
	required string roomId=1;// 房间Id
	extend BaseData {
        optional Q_CheckResidentRoomState ext = 1001;  
    }
}
//推送(居民室)
message  A_ResidentRoom{
	repeated ResidentRoom residentRoom=1;
	extend BaseData {
        optional A_ResidentRoom ext = 2004;  
    }
}

// 武器厂和护甲厂生成 装备信息
message ProduceEquipInfo{
	required string roomId=1;// 房间Id
	repeated int32  wHJHProducting=2;// 正在加工武器,护甲,戒指,护符 [装备类型,品质,剩余时间] 
									   // 武器类型 0 近战,1 远程,2魔法,3 斗士(板甲),4 弓箭手(皮甲),5 法师外衣,6 戒指,7 护符
									   // 品质 : 0 罕见,1 稀有, 2史诗,3传说
									   // 当剩余时间为零的时候 即可 领取 
}
// Q_xxx 消息是 不需要客户端等待返回的(防止卡在)是个异步消息. 只有客户端写好监听回来消息即可
// 检查生成装备的状态 [客户端和服务器 同步最新信息  消息 A_ProduceEquipInfo]
message Q_CheckProductEquipState {
	required string roomId=1;// 房间id(服务器返回对应装备)
	extend BaseData {
        optional Q_CheckProductEquipState ext = 1002;  
    }
}
message A_ProduceEquipInfo{
	required ProduceEquipInfo proEquipInfo=1;// 此房间生成装备的状态信息
	extend BaseData {
        optional A_ProduceEquipInfo ext = 2005;  
    }
}

// 点击领取 已经制作完成武器或者护甲
message RQ_PickupProCompleteEquip{
	required string roomId=1;// 房间id(服务器返回对应装备)
	
}
message RS_PickupProCompleteEquip{
	required int32 ret=1;// 0 成功  其他异常
	optional ProduceEquipInfo equip=2;// 显示制造成功物品
}

// 所有法术 (魔法工厂生产和魔法实验室研制)
message AllMagicSkillInfo{
	repeated MagicSkillInfo  proMagicSkill=1;// 生产中[按照顺序生成]
	repeated MagicSkillInfo  completMagicSkill=2;// 已经完成的
	repeated MagicSkillInfo  battleInUseMagicSkill=3;//战斗中使用的
	repeated MagicSkillLevel magicSkillLevel=4;// 8种类型魔法技能等级最高和状态.
}

// 魔法工坊 制作法术
message MagicSkillInfo{
	required int32 id=1;
	required int32 skillId=2;// 读表id
	required int32 skillState=3;//法术状态 0已完成未使用,1 投入战斗使用 2正在生成的
	required int64 skillTime=4;//开始生产时间戳 完成生成 = 0 ; >0 正在生成
}

// 魔法法术等级 (8种类型魔法技能等级最高和状态)
message MagicSkillLevel{
	required int32 skillId=2;//读表id
	required int32 levelUpTime=3; //研究下一等级完成剩余时间:  研究完成==0; > 0 正在提升的
}

// 研究新型法术(法术升级) 正在加个生产的继续使用 之前等级法术
message RQ_ResearchMagicSkill{
	required int32 type=1;// 0 普通 1 钻石加速
	required int32 skillId=2;//需要升级法术Id
	extend BaseData {
        optional RQ_ResearchMagicSkill ext = 111;  
    }
}
message RS_ResearchMagicSkill{
	required int32 ret=1;
	optional MagicSkillLevel magicSkill=2;// 正在法术升级
	extend BaseData {
        optional RS_ResearchMagicSkill ext = 112;  
    }
}

// 制造(生成)法术
message RQ_MakeMagicSkill{
	required int32 type=1;// 0 普通生成, 1 加速生产, 2 取消生产,3 全局加速
	optional int32 skillId=2;// 选择要制作的法术(全局加速不需要上传)
	extend BaseData {
        optional RQ_MakeMagicSkill ext = 113;  
    }
}
message RS_MakeMagicSkill{
	required int32 ret =1;// 0 开始制造
	repeated MagicSkillInfo magicSkillings=2;// 正在制造的法术和完成的法术
	extend BaseData {
        optional RS_MakeMagicSkill ext = 114;  
    }
}
// 添加法术到战斗中去
message RQ_AddBattleInMagicSkill{
	required int32 positions=1;// [约定的位置]
	required int32 magicId=2;// 法术Id
	extend BaseData {
        optional RQ_AddBattleInMagicSkill ext = 115;  
    }
}
message RS_AddBattleInMagicSkill{
	required int32 ret =1;// 0 成功
	repeated MagicSkillInfo  battleInUseMagicSkill=2;//战斗中使用的法术
	extend BaseData {
        optional RS_AddBattleInMagicSkill ext = 116;  
    }
}

// 珠宝厂(制作首饰和护符)
message JewelleryFactoryRoom{
		// 待定
}
// 同步房间状态信息 [返回 A_RoomInfo]
message Q_RoomState{
	required string roomId=1;// 房间Id 07 01
	extend BaseData {
        optional Q_RoomState ext = 1003;  
    }
}

// 房间升级/房间加快升级/取消升级
message RQ_RoomUpdateLevel{
	required string roomId=1;// 房间Id 07 01
	required int32 type=2;// 操作类型  1，普通升级； 2 加快升级 0：取消升级
	extend BaseData {
        optional RQ_RoomUpdateLevel ext = 117;  
    }
}

message RS_RoomUpdateLevel{
	required int32 ret=1;//0:成功 -1:失败(失败具体原因在常量描述中)
	optional RoomInfo roomInfo=2;
	repeated ConsumeItem returnItem=3;//退还的物品(取消操作)
	extend BaseData {
        optional RS_RoomUpdateLevel ext = 118;  
    }
}
// 房间的合并(这个最好还是客户端和服务端 各自算,原因在于编辑模式 存在数据干扰,或者关闭按钮取消拆分和合并)
message RQ_RoomMerger{
	repeated int32 roomIds =1;// 房间ids1....
	extend BaseData {
        optional RQ_RoomMerger ext = 119;  
    }
}
message RS_RoomMerger{
	required int32 ret=1;//0:成功 -1:失败(失败具体原因在常量描述中)
	repeated int32 reqRoomIds =2;//  (透传参数)请求合并的房间id1,Id2....
	optional RoomInfo newroomInfo=3;// 大房间
	extend BaseData {
        optional RS_RoomMerger ext = 120;  
    }
}

// 拆分房间(这个最好还是客户端和服务端 各自算)
message RQ_RoomSplit{
	required int32 roomId=1;// 大房间的Id
	extend BaseData {
        optional RQ_RoomSplit ext = 121;  
    }
}
message RS_RoomSplit{
	required int32 ret=1;//0:成功 -1:失败(失败具体原因在常量描述中)
	required int32 reqRoomId=2;// (透传参数)请求拆分的大房间
	repeated RoomInfo rooms =3;//  分解之后房间rood1,room2....
	extend BaseData {
        optional RS_RoomSplit ext = 122;  
    }
}

// 保存房间
message  RQ_SaveAllRoom{
	repeated RoomInfo room =1;// 请求所有房间 (只需要Id和位置信息)
	extend BaseData {
        optional RQ_SaveAllRoom ext = 123;  
    }
}
message  RS_SaveAllRoom{
	required int32 ret=1;// 0 成功, -1 失败
	// 需返回 所有房间信息
	repeated RoomInfo allRoom=3;// 所有房间 基础信息
	repeated ResidentInfo allResident=4 ;//所有居民
	repeated ProduceRoom allProRoom=5;// 生产类房间
	repeated StoreRoom  allStoreRoom=6;// 存储类房间
	repeated ResidentRoom  allResidentRoom=7;// 居民室
	optional ProduceEquipInfo proEquip=8;// 武器厂和护甲厂正在生产或已经完成生产的装备(未领取)
	optional AllMagicSkillInfo allMagicSkill=9;// 魔法工厂生产和投入战斗使用的法术 以及魔法实验室研制法术最高等级
	extend BaseData {
        optional RS_SaveAllRoom ext = 124;  
    }
}
//---------------房间信息结束---------


//---------------- 以下是居民信息----
// 成年居民
message ResidentInfo{
	required int32 id=1;// 居民Id
	optional string name=2;//居民名称
	required int32 sex=3;// 0 男 1 女
	repeated int32 talentAttr=4;
	// 天赋属性数值 6种 按照顺序[战士，会计，厨师，炼金，木匠，铁匠] 
	repeated int32 talentAttrUpdateBeginTime=5;
	// 天赋升级时间改为 两位数组 第0位为训练类型 第1位为训练时间 [类型，时间]
	// 天赋升级时间 6种 按照顺序[类型，升级时间]  0 表示升级成功; >0 还需多少完成时间（居民在训练房）
	// 没有升级的 就是空
	
	optional int32 battlePower=6;//战力
	optional int32 hp=7;// 生命值<血量>
	repeated int32 equips=8;// 身上装备ID 5种 按照顺序[武器，护甲，首饰，护符，神器]
	// 穿装备和居民升级之后合成的属性值 按照顺序 
	// [伤害类型，伤害/s，物理护甲，魔法护甲，暴击率，法强，命中，闪避]
	//  魔法1/物理2
	repeated int32 attrs=9;
	optional int32 startLv=10;// 居民的星级
	optional string roomId=11;// 所属房间Id , 0 表示只由人 1,系统送的
	repeated int32  hairAndBeard=12;//[发型,胡须]
	// 对女性增加几个属性
	optional int32 womanPrivileges=13 ;// 0000  自由身 0001 恋爱期 0010 怀孕 0100 哺育期间
	optional int32 womanPrivilegesTime =14;// 女性居民特权期 结束时间(恋爱期,哺育期)
}

// 婴幼儿
message ChildAndBaby{
	required int32 id=1;// 居民Id
	optional string name=2;//居民名称
	required int32 sex=3;// 0 男 1 女
	optional int64  birthday=4;//人出生就有生日
	required int32  hairStyle=5;//发型
}


// 确认养育(生小)小孩
message RQ_ConfirmRearKid{
	required int32 id=1;// 居民Id (女性的id)
	extend BaseData {
        optional RQ_ConfirmRearKid ext = 125;  
    }
}
message RS_ConfirmRearKid{
	required int32 ret=1;// 0 成功 -1为怀孕 <参数意义统一编码>
	optional ChildAndBaby child=2;// 婴儿居民
	optional int32 motherId=3;// 母亲Id(成年)
	optional int32 fatherId=4;// 父亲Id
	extend BaseData {
        optional RS_ConfirmRearKid ext = 126;  
    }
}
// 确认小孩成年
message RQ_ConfirmKidAdult{
	required int32 id=1;// 居民Id 
	extend BaseData {
        optional RQ_ConfirmKidAdult ext = 127;  
    }
}
message RS_ConfirmKidAdult{
	required int32 ret=1;// 0 成功; -1 <参数意义统一编码>
	optional ResidentInfo adult=2;// 成年之后
	extend BaseData {
        optional RS_ConfirmKidAdult ext = 128;  
    }
}

// 训练室进行训练
// 确认训练 完成
message RQ_ConfirmTrain{
	required int32 id=1;// 居民Id 
	extend BaseData {
        optional RQ_ConfirmTrain ext = 129;  
    }
}
message RS_ConfirmTrain{
	required int32 ret=1;// 0 成功; -1 <参数意义统一编码>
	optional ResidentInfo  residentInfo=2;// 最新的居民信息(如果存在下一级自动升级为下一级)
	extend BaseData {
        optional RS_ConfirmTrain ext = 130;  
    }
}

// 生成房 和训练房,实验室 把居民拉入房间
message RQ_DragIntoRoom{
	required int32 id=1;// 居民Id 
	required string roomId=2;//房间Id
	extend BaseData {
        optional RQ_DragIntoRoom ext = 131;  
    }
}
message RS_DragIntoRoom{
	required int32 ret=1;// 0 成功; -1 <参数意义统一编码>
	repeated ResidentInfo  residentInfos=2;// 可能有人被挤掉了.
	extend BaseData {
        optional RS_DragIntoRoom ext = 132;  
    }
}
// 把居民替换掉
message RQ_ExchangeResident{
// 待实现
}


//---------------其他------------

// 装备包括 武器,护甲,首饰,护符,神器
message EquipmentInfo{
	required int32 id=1;// 装备主键Id 系统生成
	required int32 itemId = 2;//对应装备表ID
	optional int64 gainTime = 3;// 获得时间
	optional int32 equiptor=4;// 被装备在居民身上[居民的iD] 没有装备 为 0 
	optional int32 isRead = 5;// 玩家是否查看<最新>
}

// 道具: 碎片,宝箱,5材料,钻石
message PropInfo{
	required int32 propId=1;// 读<<外部道具配置表>>
	required int32 num=2;// 数量
	required int32 type=3;// 类型  自定义 0 碎片 1 宝箱 ,2材料,3钻石
}


// 宝箱 <背包系统>
message Box{
	repeated EquipmentInfo equips =1;// 所有准备
	repeated PropInfo bxAndProps=2;// 对应道具表[宝箱1,宝箱2...碎片1..碎片2...] 
}


// 奖励 弹出提示
message ShowItem{
	 repeated EquipmentInfo equips =1;// 装备
	 repeated PropInfo props=2;// 道具
}



// 幸福度  最大 一百个 幸福点 
//  一分钟产生一个气泡,每次点击气泡 +3个点
// 战斗一次  +3个点
// 气泡3分钟不点 自动消失 扣除5个点

message A_QiPao{
	required int32 id=1;// 气泡Id
	required int32 jumingId=2;// 气泡 在那个居民身上
	extend BaseData {
        optional A_QiPao ext = 2006;  
    }
}
// 推送幸福度 
message A_HappinessState{
	optional int32 happinessNum = 1;	//幸福度点数<关连宠物>
	extend BaseData {
        optional A_HappinessState ext = 2007;  
    }
}




//断线重连
message RQ_Reconnect {  
    required string sessionToken = 1;		//上次登录成功后返回的session token
    extend BaseData {  
        optional RQ_Reconnect ext = 133;
    } 
}
message RS_Reconnect {  
    required int32 ret= 1 ;		// 0 成功,-1 失败
    extend BaseData {
        optional RS_Reconnect ext = 134;
    } 
}


//推送错误消息
message A_ErrorMessage {
	required string msg = 1;	//消息内容
	extend BaseData {
        optional A_ErrorMessage ext = 2008;  
    }
}

//断线重连的sessionToken (这个消息在登录成功之后就会推送给你 ,保存在客户端)
message A_SessionToken {
	required string sessionToken = 1;	//当前连接的token
	extend BaseData {
        optional A_SessionToken ext = 2009;  
    }
}



//PS:
// 1.房间的合并和拆分
// 优先选择 客户端和服务器自己合并
// 因为同类型和等级房间合并是主动自发的.
// 保存房间时候: 只需要给我最后各个房间数据即可,居民的分配由服务器推送为准. 房屋编辑只是针对房子:摆放位置
// 以及合拆房间.
// 服务器会保留各个房间的原本居民.所以系统自动拆分 那么人员还是 自动会分到各个小房间上
// 如果选择 服务参与:
// 问题1:处于编辑模式 玩家 拆分之后 玩家未保存确定,给服务器带来很多无用的中间数据. 不知道在何时删.
// 今天测试发现一个问题:
// 宝库已经创建, 但是在我杀掉进程之后 再次登录之后 发现大厅中没有这个宝库.



