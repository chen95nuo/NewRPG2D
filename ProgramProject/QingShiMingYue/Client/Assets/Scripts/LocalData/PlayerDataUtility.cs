//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;
using ClientServerCommon;
using KodGames.ClientClass;

public static class PlayerDataUtility
{
	#region Tutorial
	// 判断上阵玩家的品质、是否已升到满级
	public static bool IsAvatarsQualityLevelContent(KodGames.ClientClass.Player player, int qualityLevel)
	{
		for (int i = 0; i < player.PositionData.Positions.Count; i++)
		{
			var position = player.PositionData.Positions[i];

			for (int j = 0; j < position.AvatarLocations.Count; j++)
			{
				var avatarConfig = ConfigDatabase.DefaultCfg.AvatarConfig.GetAvatarById(position.AvatarLocations[j].ResourceId);
				if (avatarConfig.qualityLevel < qualityLevel)
					continue;

				var avatarRecord = SysLocalDataBase.Inst.LocalPlayer.SearchAvatar(position.AvatarLocations[j].Guid);
				if (avatarRecord.LevelAttrib.Level < avatarConfig.GetAvatarBreakthrough(avatarRecord.BreakthoughtLevel).breakThrough.powerUpLevelLimit)
					return true;
			}
		}

		return false;
	}

	//判断玩家阵位上的角色是否有装备
	public static bool IsLineUpEquipmentOnAvatars(KodGames.ClientClass.Player player, int positionId, int equipType)
	{
		var position = player.PositionData.GetPositionById(positionId);

		if (position == null)
			return false;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
		{
			for (int j = 0; j < position.EquipLocations.Count; j++)
			{
				if (position.AvatarLocations[i].ShowLocationId == position.EquipLocations[j].ShowLocationId)
				{
					if (ConfigDatabase.DefaultCfg.EquipmentConfig.GetEquipmentById(position.EquipLocations[j].ResourceId).type == equipType)
						return true;
				}
			}
		}

		return false;
	}

	//判断玩家阵容中是否有某一个角色并且角色是否有装备
	public static bool IsLineUpEquipOnAvatar(KodGames.ClientClass.Player player, int positionId, int equipType, int avatarId)
	{
		var position = player.PositionData.GetPositionById(positionId);

		if (position == null)
			return true;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
		{
			if (position.AvatarLocations[i].ResourceId != avatarId)
				continue;

			for (int j = 0; j < position.EquipLocations.Count; j++)
			{
				if (position.AvatarLocations[i].ShowLocationId == position.EquipLocations[j].ShowLocationId)
					if (ConfigDatabase.DefaultCfg.EquipmentConfig.GetEquipmentById(position.EquipLocations[j].ResourceId).type == equipType)
						return true;
			}
			return false;
		}
		return true;
	}

	//判断玩家阵位上的角色是否有技能
	public static bool IsLineUpSkillOnAvatars(KodGames.ClientClass.Player player, int positionId)
	{
		var position = player.PositionData.GetPositionById(positionId);

		if (position == null)
			return false;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
		{
			for (int j = 0; j < position.SkillLocations.Count; j++)
			{
				if (position.AvatarLocations[i].ShowLocationId == position.SkillLocations[j].ShowLocationId)
					return true;
			}
		}

		return false;
	}

	public static int QualityLevelAvatarsCount(KodGames.ClientClass.Player player, int qualityLevel)
	{
		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(player.PositionData.ActivePositionId);
		List<string> lineUpAvatarsGuids = new List<string>();
		int count = 0;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
			lineUpAvatarsGuids.Add(position.AvatarLocations[i].Guid);

		bool islineUpAvatar = false;

		for (int i = 0; i < player.Avatars.Count; i++)
		{
			islineUpAvatar = false;

			for (int j = 0; j < lineUpAvatarsGuids.Count; j++)
				if (player.Avatars[i].Guid.Equals(lineUpAvatarsGuids[j]))
					islineUpAvatar = true;

			var avatarConfig = ConfigDatabase.DefaultCfg.AvatarConfig.GetAvatarById(player.Avatars[i].ResourceId);
			if (avatarConfig.qualityLevel >= qualityLevel && !islineUpAvatar)
				count++;
		}

		return count;
	}

	#endregion

	#region  Attribute
	public static AttributeCalculator.Avatar GetCalculatorAvatar(KodGames.ClientClass.Avatar avatar, int positionId, int showLocationId, int locationId, KodGames.ClientClass.Player player, bool excludeMeridian)
	{
		AttributeCalculator.Avatar calculateAvatar = new AttributeCalculator.Avatar(avatar.ResourceId, avatar.LevelAttrib.Level, avatar.BreakthoughtLevel, -1, IDSeg.InvalidId, GetActiveIllusionIdByAvatarId(player, avatar.ResourceId));

		// Meridian
		if (excludeMeridian == false)
		{
			for (int i = 0; i < avatar.MeridianDatas.Count; ++i)
			{
				var meridian = avatar.MeridianDatas[i];
				List<ClientServerCommon.PropertyModifier> modifierList = new List<ClientServerCommon.PropertyModifier>();
				for (int j = 0; j < meridian.Modifiers.Count; ++j)
				{
					var modifier = meridian.Modifiers[j];

					ClientServerCommon.PropertyModifier propertyModifier = new ClientServerCommon.PropertyModifier();
					propertyModifier.attributeType = modifier.AttributeType;
					propertyModifier.attributeValue = modifier.AttributeValue;
					propertyModifier.modifyType = modifier.ModifyType;
					propertyModifier.type = modifier.Type;
					modifierList.Add(propertyModifier);
				}

				calculateAvatar.meridians.Add(new AttributeCalculator.Meridian(modifierList, meridian.BufferId));
			}
		}

		//初始化角色霸气数据
		if (avatar.Domineer.Domineers.Count > 0)
		{
			for (int i = 0; i < avatar.Domineer.Domineers.Count; i++)
			{
				var domineer = avatar.Domineer.Domineers[i];
				calculateAvatar.domineers.Add(new AttributeCalculator.Domineer(domineer.DomineerId, domineer.Level));
			}
		}
		else
		{
			for (int i = 0; i < ConfigDatabase.DefaultCfg.DomineerConfig.DefalultDomineers.Count; i++)
			{
				DomineerConfig.DefaultDomineer defaultDomineer = ConfigDatabase.DefaultCfg.DomineerConfig.DefalultDomineers[i];
				AvatarConfig.Avatar avatarConfig = ConfigDatabase.DefaultCfg.AvatarConfig.GetAvatarById(avatar.ResourceId);
				if (defaultDomineer.AvatarCountryType == avatarConfig.countryType)
					calculateAvatar.domineers.Add(new AttributeCalculator.Domineer(defaultDomineer.DomineerId, defaultDomineer.Level));
			}
		}

		if (positionId != IDSeg.InvalidId)
		{
			var equipments = GetLineUpEquipments(player, positionId, showLocationId);
			var skills = GetLineUpSkills(player, positionId, showLocationId);
			var dans = GetLineUpDans(player, positionId, showLocationId);
			var beasts = GetLineUpBeasts(player, positionId, showLocationId);

			for (int i = 0; i < equipments.Count; i++)
				calculateAvatar.equipments.Add(new AttributeCalculator.Equipment(equipments[i].ResourceId, equipments[i].LevelAttrib.Level, equipments[i].BreakthoughtLevel));

			for (int i = 0; i < skills.Count; i++)
				calculateAvatar.skills.Add(new AttributeCalculator.Skill(skills[i].ResourceId, skills[i].LevelAttrib.Level));

			for (int i = 0; i < dans.Count; i++)
			{
				foreach (var danAttributeGroup in dans[i].DanAttributeGroups)
					calculateAvatar.dans.Add(new AttributeCalculator.Dan(danAttributeGroup.DanAttributes[0].FuncType, danAttributeGroup.DanAttributes[0].FuncParams, danAttributeGroup.DanAttributes[0].PropertyModifierSets[dans[i].LevelAttrib.Level - 1].Modifiers[0].AttributeValue, danAttributeGroup.Id, dans[i].BreakthoughtLevel, dans[i].LevelAttrib.Level));
			}

			if (beasts.Count > 0)
				calculateAvatar.guildBeastInfo = GetBeastCalcByBeast(beasts[0]);

			calculateAvatar.battlePosition = locationId;
		}


		return calculateAvatar;
	}

	public static AttributeCalculator.Avatar GetCalculatorAvatar(KodGames.ClientClass.Avatar avatar, int positionId, int showLocationId, KodGames.ClientClass.Player player, bool excludeMeridian)
	{
		var location = GetAvatarLocation(player, positionId, showLocationId);
		return GetCalculatorAvatar(avatar, positionId, showLocationId, location != null ? location.LocationId : -1, player, excludeMeridian);
	}

	public static List<AttributeCalculator.Avatar> GetCheerCalculatorAvatars(KodGames.ClientClass.Player player, int positionId)
	{
		var cheerCalculatorAvatars = new List<AttributeCalculator.Avatar>();

		if (player != null)
		{
			var position = player.PositionData.GetPositionById(positionId);

			if (position != null)
			{
				for (int i = 0; i < position.Partners.Count; ++i)
				{
					var avatar = player.SearchAvatar(position.Partners[i].AvatarGuid);

					if (avatar == null)
						continue;

					var attributeAvatar = GetCalculatorAvatar(avatar, IDSeg.InvalidId, IDSeg.InvalidId, player, false);
					attributeAvatar.partnerId = position.Partners[i].PartnerId;

					cheerCalculatorAvatars.Add(attributeAvatar);
				}
			}
		}

		return cheerCalculatorAvatars;
	}

	public static List<AttributeCalculator.Attribute> GetLocationAvatarAttributes(KodGames.ClientClass.Location avatarLocation, KodGames.ClientClass.Player player)
	{
		return GetLocationAvatarAttributes(avatarLocation, player, true, true);
	}

	public static List<AttributeCalculator.Attribute> GetLocationAvatarAttributes(KodGames.ClientClass.Location avatarLocation, KodGames.ClientClass.Player player, bool removeZero)
	{
		return GetLocationAvatarAttributes(avatarLocation, player, true, removeZero);
	}

	public static List<AttributeCalculator.Attribute> GetLocationAvatarAttributes(KodGames.ClientClass.Location avatarLocation, KodGames.ClientClass.Player player, bool mergeAttribute, bool removeZero)
	{
		var attributes = ConfigDatabase.DefaultCfg.AttributeCalculator.CalculateAvatarAttributes(
			GetCalculatorAvatar(player.SearchAvatar(avatarLocation.Guid), avatarLocation.PositionId, avatarLocation.ShowLocationId, avatarLocation.LocationId, player, false),
			GetCheerCalculatorAvatars(player, avatarLocation.PositionId),
			GetLineUpAvatarIds(player, avatarLocation.PositionId));

		if (mergeAttribute)
			MergeAttributes(ref attributes, removeZero, false);

		// Sort.
		attributes.Sort(DataCompare.CompareAttribute);

		return attributes;
	}

	public static List<AttributeCalculator.Attribute> GetAvatarAttributes(KodGames.ClientClass.Avatar avatar, bool excludeMeridian)
	{
		return GetAvatarAttributes(avatar, excludeMeridian, true);
	}

	public static List<AttributeCalculator.Attribute> GetAvatarAttributes(KodGames.ClientClass.Avatar avatar, bool excludeMeridian, bool removeZero)
	{
		return GetAvatarAttributes(null, avatar, excludeMeridian, true, removeZero);
	}

	public static List<AttributeCalculator.Attribute> GetAvatarAttributes(KodGames.ClientClass.Player player, KodGames.ClientClass.Avatar avatar, bool excludeMeridian, bool mergeAttribute, bool removeZero)
	{
		var attributes = ConfigDatabase.DefaultCfg.AttributeCalculator.CalculateAvatarAttributes(GetCalculatorAvatar(avatar, IDSeg.InvalidId, IDSeg.InvalidId, player, excludeMeridian), null, null);

		if (mergeAttribute)
			MergeAttributes(ref attributes, removeZero, false);

		// Sort.
		attributes.Sort(DataCompare.CompareAttribute);

		return attributes;
	}

	public static List<AttributeCalculator.Attribute> GetAvatarAttributesForAssistant(AttributeCalculator.Avatar assistantAvatar)
	{
		var dict = ConfigDatabase.DefaultCfg.AttributeCalculator.GetAssistantsAttributesBonus(assistantAvatar);
		var attribs = new List<AttributeCalculator.Attribute>();
		foreach (var kvp in dict)
			attribs.Add(new AttributeCalculator.Attribute(kvp.Key, kvp.Value));

		MergeAttributes(ref attribs, false, false);
		return attribs;
	}

	public static List<AttributeCalculator.Attribute> GetEquipmentAttributes(KodGames.ClientClass.Equipment equipment)
	{
		return GetEquipmentAttributes(equipment, true);
	}

	private static List<AttributeCalculator.Attribute> GetEquipmentAttributes(KodGames.ClientClass.Equipment equipment, bool merge)
	{
		var attributes = ConfigDatabase.DefaultCfg.AttributeCalculator.CalculateEquipmentAttributes(
			new AttributeCalculator.Equipment(
				equipment.ResourceId,
				equipment.LevelAttrib.Level,
				equipment.BreakthoughtLevel));

		if (merge)
			MergeAttributes(ref attributes, true, true);

		return attributes;
	}

	public static List<AttributeCalculator.Attribute> GetBeastAttributes(KodGames.ClientClass.Beast beast)
	{
		return GetBeastAttributes(beast, true);
	}

	private static List<AttributeCalculator.Attribute> GetBeastAttributes(KodGames.ClientClass.Beast beast, bool merge)
	{
		var attributes = ConfigDatabase.DefaultCfg.AttributeCalculator.CalculateGuardBeastAttributes(GetBeastCalcByBeast(beast));

		if (merge)
			MergeAttributes(ref attributes, true, false);

		return attributes;
	}

	private static AttributeCalculator.GuardBeastParam GetBeastCalcByBeast(KodGames.ClientClass.Beast beast)
	{
		List<int> partIds = new List<int>();
		List<AttributeCalculator.Attribute> beastAttributes = new List<AttributeCalculator.Attribute>();

		var breakLevelCfg = ConfigDatabase.DefaultCfg.BeastConfig.GetBreakthoughtAndLevel(beast.ResourceId, beast.BreakthoughtLevel, beast.LevelAttrib.Level);

		foreach (var activePart in beast.PartIndexs)
		{
			foreach (var beastPart in breakLevelCfg.BeastPartActives)
			{
				if (beastPart.Index == activePart)
				{
					partIds.Add(beastPart.AttributeId);
				}
			}
		}

		foreach (var attribute in breakLevelCfg.Attributes)
		{
			AttributeCalculator.Attribute attriCalc = new AttributeCalculator.Attribute(0, 0);
			attriCalc.type = attribute.type;
			attriCalc.value = attribute.value;
			beastAttributes.Add(attriCalc);
		}

		return new AttributeCalculator.GuardBeastParam(
			beast.ResourceId,
			beast.BreakthoughtLevel,
			beast.LevelAttrib.Level,
			partIds,
			beastAttributes
			);
	}

	public static List<AttributeCalculator.Attribute> MergeAttributes(List<ClientServerCommon.PropertyModifier> modifiers, bool removeZero, bool mergePMDR)
	{
		List<AttributeCalculator.Attribute> attributes = new List<AttributeCalculator.Attribute>();

		if (modifiers != null)
		{
			for (int i = 0; i < modifiers.Count; i++)
				attributes.Add(new AttributeCalculator.Attribute(modifiers[i].attributeType, modifiers[i].attributeValue));

			MergeAttributes(ref attributes, removeZero, mergePMDR);
		}

		return attributes;
	}

	private static void MergeAttributes(ref List<AttributeCalculator.Attribute> attributes, bool removeZero, bool mergePMDR)
	{
		var dic_attribute = new Dictionary<int, AttributeCalculator.Attribute>();
		foreach (var attribute in attributes)
		{
			if (!ConfigDatabase.DefaultCfg.GameConfig.CanAttributeShow(attribute.type))
				continue;

			dic_attribute.Add(attribute.type, attribute);
		}

		attributes.Clear();

		if (dic_attribute.ContainsKey(_AvatarAttributeType.PAP) && dic_attribute.ContainsKey(_AvatarAttributeType.MAP))
			dic_attribute.Remove(MinGrowthAttributeType(dic_attribute[_AvatarAttributeType.PAP], dic_attribute[_AvatarAttributeType.MAP]));

		//if (dic_attribute.ContainsKey(_AvatarAttributeType.PDP) && dic_attribute.ContainsKey(_AvatarAttributeType.MDP))
		//    dic_attribute.Remove(MinGrowthAttributeType(dic_attribute[_AvatarAttributeType.PDP], dic_attribute[_AvatarAttributeType.MDP]));

		if (dic_attribute.ContainsKey(_AvatarAttributeType.PAR) && dic_attribute.ContainsKey(_AvatarAttributeType.MAR))
			dic_attribute.Remove(MinGrowthAttributeType(dic_attribute[_AvatarAttributeType.PAR], dic_attribute[_AvatarAttributeType.MAR]));

		if (mergePMDR)
		{
			AttributeCalculator.Attribute mdr = null;
			AttributeCalculator.Attribute pdr = null;
			dic_attribute.TryGetValue(_AvatarAttributeType.MDR, out mdr);
			dic_attribute.TryGetValue(_AvatarAttributeType.PDR, out pdr);
			dic_attribute.Remove(_AvatarAttributeType.MDR);
			dic_attribute.Remove(_AvatarAttributeType.PDR);
			dic_attribute.Add(_AvatarAttributeType.PMDR, new AttributeCalculator.Attribute(_AvatarAttributeType.PMDR, Math.Max(mdr != null ? mdr.value : 0, pdr != null ? pdr.value : 0)));
		}

		foreach (var leftAttribute in dic_attribute.Values)
		{
			if (removeZero && Mathf.Approximately((float)leftAttribute.value, 0))
				continue;
			attributes.Add(leftAttribute);
		}

		attributes.Sort(DataCompare.CompareAttribute);
	}

	public static void MergeClientServerAttributes(ref List<ClientServerCommon.Attribute> attributes, bool removeZero)
	{
		var dic_attribute = new Dictionary<int, ClientServerCommon.Attribute>();
		foreach (var attribute in attributes)
		{
			if (!ConfigDatabase.DefaultCfg.GameConfig.CanAttributeShow(attribute.type))
				continue;

			dic_attribute.Add(attribute.type, attribute);
		}

		attributes.Clear();

		if (dic_attribute.ContainsKey(_AvatarAttributeType.PAP) && dic_attribute.ContainsKey(_AvatarAttributeType.MAP))
			dic_attribute.Remove(MinGrowthClientServerAttributeType(dic_attribute[_AvatarAttributeType.PAP], dic_attribute[_AvatarAttributeType.MAP]));

		if (dic_attribute.ContainsKey(_AvatarAttributeType.PAR) && dic_attribute.ContainsKey(_AvatarAttributeType.MAR))
			dic_attribute.Remove(MinGrowthClientServerAttributeType(dic_attribute[_AvatarAttributeType.PAR], dic_attribute[_AvatarAttributeType.MAR]));

		foreach (var leftAttribute in dic_attribute.Values)
		{
			if (removeZero && Mathf.Approximately((float)leftAttribute.value, 0))
				continue;
			attributes.Add(leftAttribute);
		}

		attributes.Sort(DataCompare.CompareClientServerAttribute);
	}

	private static int MinGrowthAttributeType(AttributeCalculator.Attribute Attribute1, AttributeCalculator.Attribute Attribute2)
	{
		if (Attribute1.value >= Attribute2.value)
			return Attribute2.type;
		else
			return Attribute1.type;
	}

	private static int MinGrowthClientServerAttributeType(ClientServerCommon.Attribute Attribute1, ClientServerCommon.Attribute Attribute2)
	{
		if (Attribute1.value >= Attribute2.value)
			return Attribute2.type;
		else
			return Attribute1.type;
	}

	public static List<KodGames.ClientClass.PropertyModifier> MergeModifiers(List<ClientServerCommon.PropertyModifier> modifiers, bool removeZero, bool mergePMDR)
	{
		var mergedModifiers = new List<KodGames.ClientClass.PropertyModifier>();
		for (int i = 0; i < modifiers.Count; ++i)
		{
			var modifier = modifiers[i];
			var mergedModifier = new KodGames.ClientClass.PropertyModifier();
			mergedModifier.Type = modifier.type;
			mergedModifier.ModifyType = modifier.modifyType;
			mergedModifier.AttributeType = modifier.attributeType;
			mergedModifier.AttributeValue = modifier.attributeValue;

			mergedModifiers.Add(mergedModifier);
		}

		return MergeModifiers(mergedModifiers, removeZero, mergePMDR);
	}

	public static List<KodGames.ClientClass.PropertyModifier> MergeModifiers(List<KodGames.ClientClass.PropertyModifier> modifiers, bool removeZero, bool mergePMDR)
	{
		// 合并属性相同的modifier
		var mergedModifiers = new List<KodGames.ClientClass.PropertyModifier>();
		for (int i = 0; i < modifiers.Count; ++i)
		{
			var modifier = modifiers[i];

			if (!ConfigDatabase.DefaultCfg.GameConfig.CanAttributeShow(modifier.AttributeType))
				continue;

			var mergedModifer = SearchModifier(mergedModifiers, modifier.ModifyType, modifier.AttributeType);
			if (mergedModifer != null)
			{
				mergedModifer.AttributeValue += modifier.AttributeValue;
			}
			else
			{
				mergedModifer = new KodGames.ClientClass.PropertyModifier();
				mergedModifer.CopyValue(modifier);
				mergedModifiers.Add(mergedModifer);
			}
		}

		// 有些属性只需要显示一对中的较大一个
		RemoveSmallerModifier(mergedModifiers, _AvatarAttributeType.PAP, _AvatarAttributeType.MAP);
		RemoveSmallerModifier(mergedModifiers, _AvatarAttributeType.PDP, _AvatarAttributeType.MDP);
		RemoveSmallerModifier(mergedModifiers, _AvatarAttributeType.PAR, _AvatarAttributeType.MAR);

		// 将MDR, PDR合并显示
		if (mergePMDR)
			ReplaceModifierWithMax(mergedModifiers, _AvatarAttributeType.MDR, _AvatarAttributeType.PDR, _AvatarAttributeType.PMDR);

		// 删除为0的参数
		if (removeZero)
		{
			for (int i = 0; i < mergedModifiers.Count; ++i)
			{
				var modifier = mergedModifiers[i];
				if (Mathf.Approximately(modifier.AttributeValue, 0))
					mergedModifiers.RemoveAt(i--);
			}
		}

		// 排序, 优先属性升序,然后修改类型升序
		mergedModifiers.Sort((KodGames.ClientClass.PropertyModifier m1, KodGames.ClientClass.PropertyModifier m2) =>
		{
			if (m1.AttributeType != m2.AttributeType)
				return ConfigDatabase.DefaultCfg.GameConfig.GetShowAttributeSortIndex(m1.AttributeType) - ConfigDatabase.DefaultCfg.GameConfig.GetShowAttributeSortIndex(m2.AttributeType);
			else
				return m1.ModifyType - m2.ModifyType;
		});

		return mergedModifiers;
	}

	private static KodGames.ClientClass.PropertyModifier SearchModifier(List<KodGames.ClientClass.PropertyModifier> modifiers, int modifyType, int attributeType)
	{
		for (int i = 0; i < modifiers.Count; ++i)
			if (modifiers[i].ModifyType == modifyType && modifiers[i].AttributeType == attributeType)
				return modifiers[i];
		return null;
	}

	private static void RemoveModifier(List<KodGames.ClientClass.PropertyModifier> modifiers, int modifyType, int attributeType)
	{
		for (int i = 0; i < modifiers.Count; ++i)
			if (modifiers[i].ModifyType == modifyType && modifiers[i].AttributeType == attributeType)
				modifiers.RemoveAt(i--);
	}

	private static void RemoveSmallerModifier(List<KodGames.ClientClass.PropertyModifier> modifiers, int attributeType1, int attributeType2)
	{
		RemoveSmallerModifier(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Replace, attributeType1, attributeType2);
		RemoveSmallerModifier(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Percentage, attributeType1, attributeType2);
		RemoveSmallerModifier(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Value, attributeType1, attributeType2);
	}

	private static void RemoveSmallerModifier(List<KodGames.ClientClass.PropertyModifier> modifiers, int modifyType, int attributeType1, int attributeType2)
	{
		var m1 = SearchModifier(modifiers, modifyType, attributeType1);
		var m2 = SearchModifier(modifiers, modifyType, attributeType2);
		if (m1 == null || m2 == null)
			return;

		modifiers.Remove(GetMinModifier(m1, m2));
	}

	private static KodGames.ClientClass.PropertyModifier GetMinModifier(KodGames.ClientClass.PropertyModifier m1, KodGames.ClientClass.PropertyModifier m2)
	{
		return m1.AttributeValue < m2.AttributeValue ? m1 : m2;
	}

	private static void ReplaceModifierWithMax(List<KodGames.ClientClass.PropertyModifier> modifiers, int attributeType1, int attributeType2, int attributeTypeReplace)
	{
		ReplaceModifierWithMax(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Replace, attributeType1, attributeType2, attributeTypeReplace);
		ReplaceModifierWithMax(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Percentage, attributeType1, attributeType2, attributeTypeReplace);
		ReplaceModifierWithMax(modifiers, ClientServerCommon.PropertyModifier._ValueModifyType.Value, attributeType1, attributeType2, attributeTypeReplace);
	}

	private static void ReplaceModifierWithMax(List<KodGames.ClientClass.PropertyModifier> modifiers, int modifyType, int attributeType1, int attributeType2, int attributeTypeReplace)
	{
		var m1 = SearchModifier(modifiers, modifyType, attributeType1);
		var m2 = SearchModifier(modifiers, modifyType, attributeType2);
		modifiers.Remove(m1);
		modifiers.Remove(m2);

		RemoveModifier(modifiers, modifyType, attributeTypeReplace);
		var replaceModifier = new KodGames.ClientClass.PropertyModifier();
		replaceModifier.Type = ClientServerCommon.PropertyModifier._Type.AttributeModifier;
		replaceModifier.ModifyType = modifyType;
		replaceModifier.AttributeType = attributeTypeReplace;
		replaceModifier.AttributeValue = Math.Max(m1 != null ? m1.AttributeValue : 0, m2 != null ? m2.AttributeValue : 0);
		modifiers.Add(replaceModifier);
	}

	private static int GetActiveIllusionIdByAvatarId(KodGames.ClientClass.Player player, int resourceId)
	{
		if (player == null)
			player = SysLocalDataBase.Inst.LocalPlayer;

		var illusionAvatars = player.IllusionData.illusionAvatars;

		for (int i = 0; i < illusionAvatars.Count; i++)
		{
			if (illusionAvatars[i].recourseId == resourceId)
				foreach (var illusion in illusionAvatars[i].illusions)
					if ((illusion.useStatus == IllusionConfig._UseStatus.UseAttr || illusion.useStatus == IllusionConfig._UseStatus.UseAll) && (illusion.endTime > SysLocalDataBase.Inst.LoginInfo.NowTime || illusion.endTime == -1))
						return illusion.illusionId;
		}
		return IDSeg.InvalidId;
	}
	#endregion

	#region  Assemble
	public static bool CheckAvatarAssemble(SuiteConfig.AssembleSetting assembleSetting, KodGames.ClientClass.Avatar avatar, KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		AttributeCalculator.Avatar calculateAvatar = GetCalculatorAvatar(avatar, positionId, showLocationId, player, true);
		return ConfigDatabase.DefaultCfg.AttributeCalculator.CheckAvatarAssemble(
			assembleSetting,
			calculateAvatar,
			positionId != IDSeg.InvalidId ? GetLineUpAvatarIds(player, positionId) : null);
	}

	public static bool CheckAvatarAssemble(SuiteConfig.AssembleSetting assembleSetting, KodGames.ClientClass.Avatar avatar, KodGames.ClientClass.Player player, List<int> assembleIDs)
	{
		AttributeCalculator.Avatar calculateAvatar = GetCalculatorAvatar(avatar, IDSeg.InvalidId, IDSeg.InvalidId, player, true);
		return ConfigDatabase.DefaultCfg.AttributeCalculator.CheckAvatarAssemble(
			assembleSetting,
			calculateAvatar,
			assembleIDs);
	}

	public static bool CheckAvatarAssemble(SuiteConfig.AssembleSetting assembleSetting, KodGames.ClientClass.Avatar avatar, KodGames.ClientClass.Player player)
	{
		return CheckAvatarAssemble(assembleSetting, avatar, player, IDSeg.InvalidId, IDSeg.InvalidId);
	}

	public static bool CheckAvatarAssemble(SuiteConfig.AssembleSetting assembleSetting, KodGames.ClientClass.Location avatarLocation, KodGames.ClientClass.Player player)
	{
		return CheckAvatarAssemble(assembleSetting, player.SearchAvatar(avatarLocation.Guid), player, avatarLocation.PositionId, avatarLocation.ShowLocationId);
	}
	#endregion

	#region Retriving avatars equipment and skill

	public static int GetBattlePosByIndexPos(int indexPos)
	{
		if (indexPos < 0)
			return -1;
		else
		{
			int row = indexPos / ConfigDatabase.DefaultCfg.GameConfig.maxColumnInFormation;
			int column = indexPos % ConfigDatabase.DefaultCfg.GameConfig.maxColumnInFormation;
			return ((row & 0x0000FFFF) << 16) | (column & 0x0000FFFF);
		}
	}

	public static int GetIndexPosByBattlePos(int battlePos)
	{
		int row = (battlePos >> 16) & 0x0000FFFF;
		int column = (battlePos & 0x0000FFFF);

		return row * ConfigDatabase.DefaultCfg.GameConfig.maxColumnInFormation + column;
	}


	public static KodGames.ClientClass.Location GetAvatarLocation(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		if (player == null)
			return null;

		var position = player.PositionData.GetPositionById(positionId);

		if (position == null)
			return null;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
			if (position.AvatarLocations[i].ShowLocationId == showLocationId)
				return position.AvatarLocations[i];

		return null;
	}

	public static KodGames.ClientClass.Location GetAvatarLocationByLocationId(KodGames.ClientClass.Player player, int positionId, int locationId)
	{
		var position = player.PositionData.GetPositionById(positionId);

		if (position == null)
			return null;

		for (int i = 0; i < position.AvatarLocations.Count; i++)
			if (position.AvatarLocations[i].LocationId == locationId)
				return position.AvatarLocations[i];

		return null;
	}

	public static List<KodGames.ClientClass.Location> GetAvatarLocations(KodGames.ClientClass.Player player, int positionId)
	{
		var position = player.PositionData.GetPositionById(positionId);

		if (position != null)
			return position.AvatarLocations;

		return new List<KodGames.ClientClass.Location>();
	}

	public static KodGames.ClientClass.Avatar GetLineUpAvatar(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		KodGames.ClientClass.Avatar avatar = null;
		var position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int i = 0; i < position.AvatarLocations.Count; i++)
			{
				if (position.AvatarLocations[i].ShowLocationId == showLocationId)
				{
					avatar = player.SearchAvatar(position.AvatarLocations[i].Guid);
					break;
				}
			}
		}

		return avatar;
	}

	public static List<KodGames.ClientClass.Avatar> GetCheerAvatars(KodGames.ClientClass.Player player, int positionId)
	{
		List<KodGames.ClientClass.Avatar> avatars = new List<KodGames.ClientClass.Avatar>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.Partners.Count; index++)
			{
				var avatar = player.SearchAvatar(position.Partners[index].AvatarGuid);

				if (avatar != null)
					avatars.Add(avatar);
			}
		}

		return avatars;
	}

	public static List<int> GetLineUpAvatarIds(KodGames.ClientClass.Player player, int positionId)
	{
		List<int> avatars = new List<int>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.AvatarLocations.Count; index++)
				if (!avatars.Contains(position.AvatarLocations[index].ResourceId))
					avatars.Add(position.AvatarLocations[index].ResourceId);

			for (int index = 0; index < position.Partners.Count; index++)
				if (!avatars.Contains(position.Partners[index].ResourceId))
					avatars.Add(position.Partners[index].ResourceId);
		}

		return avatars;
	}

	public static List<KodGames.ClientClass.Avatar> GetLineUpAvatars(KodGames.ClientClass.Player player, int positionId)
	{
		List<KodGames.ClientClass.Avatar> avatars = new List<KodGames.ClientClass.Avatar>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.AvatarLocations.Count; index++)
			{
				var avatar = player.SearchAvatar(position.AvatarLocations[index].Guid);

				if (avatar != null)
					avatars.Add(avatar);
			}
		}

		return avatars;
	}

	public static KodGames.ClientClass.Equipment GetLineUpEquipmentByType(KodGames.ClientClass.Player player, int positonId, int showLocationId, int type)
	{
		var equipments = GetLineUpEquipments(player, positonId, showLocationId);

		for (int i = 0; i < equipments.Count; i++)
		{
			var equipCfg = ConfigDatabase.DefaultCfg.EquipmentConfig.GetEquipmentById(equipments[i].ResourceId);

			if (equipCfg == null)
				continue;

			if (equipCfg.type == type)
				return equipments[i];
		}

		return null;
	}



	public static List<KodGames.ClientClass.Equipment> GetLineUpEquipments(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Equipment> equipments = new List<KodGames.ClientClass.Equipment>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.EquipLocations.Count; index++)
			{
				if (position.EquipLocations[index].ShowLocationId == showLocationId)
				{
					var equipment = player.SearchEquipment(position.EquipLocations[index].Guid);

					if (equipment != null)
						equipments.Add(equipment);
				}
			}
		}

		return equipments;
	}

	public static List<KodGames.ClientClass.Dan> GetLineUpDans(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Dan> dans = new List<KodGames.ClientClass.Dan>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.DanLocations.Count; index++)
			{
				if (position.DanLocations[index].ShowLocationId == showLocationId)
				{
					var dan = player.SearchDan(position.DanLocations[index].Guid);

					if (dan != null)
						dans.Add(dan);
				}
			}
		}

		return dans;
	}

	public static List<KodGames.ClientClass.Beast> GetLineUpBeasts(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Beast> beasts = new List<KodGames.ClientClass.Beast>();

		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.BeastLocations.Count; index++)
			{
				if (position.BeastLocations[index].ShowLocationId == showLocationId)
				{
					var beast = player.SearchBeast(position.BeastLocations[index].Guid);

					if (beast != null)
						beasts.Add(beast);
				}
			}
		}

		return beasts;
	}

	public static List<KodGames.ClientClass.Location> GetEquipmentLocations(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Location> equipmentLocations = new List<KodGames.ClientClass.Location>();

		var position = player.PositionData.GetPositionById(positionId);
		if (position != null)
		{
			for (int index = 0; index < position.EquipLocations.Count; index++)
			{
				if (position.EquipLocations[index].ShowLocationId == showLocationId)
					equipmentLocations.Add(position.EquipLocations[index]);
			}
		}
		return equipmentLocations;
	}

	public static List<KodGames.ClientClass.Location> GetDanLocations(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Location> danLocations = new List<KodGames.ClientClass.Location>();

		var position = player.PositionData.GetPositionById(positionId);
		if (position != null)
		{
			for (int index = 0; index < position.DanLocations.Count; index++)
			{
				if (position.DanLocations[index].ShowLocationId == showLocationId)
					danLocations.Add(position.DanLocations[index]);
			}
		}
		return danLocations;
	}

	public static KodGames.ClientClass.Dan GetLineUpDanByType(KodGames.ClientClass.Player player, int positonId, int showLocationId, int type)
	{
		var dans = GetLineUpDans(player, positonId, showLocationId);

		for (int i = 0; i < dans.Count; i++)
		{
			var danCfg = ConfigDatabase.DefaultCfg.DanConfig.GetDanById(dans[i].ResourceId);

			if (danCfg == null)
				continue;

			if (danCfg.Type == type)
				return dans[i];
		}

		return null;
	}


	public static List<KodGames.ClientClass.Skill> GetLineUpSkills(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Skill> skills = new List<KodGames.ClientClass.Skill>();
		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.SkillLocations.Count; index++)
			{
				if (position.SkillLocations[index].ShowLocationId == showLocationId)
				{
					var skill = player.SearchSkill(position.SkillLocations[index].Guid);


					if (skill != null)
						skills.Add(skill);
				}
			}
		}
		return skills;
	}

	public static List<int> GetLineUpSkillIds(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<int> skillIds = new List<int>();
		KodGames.ClientClass.Position position = player.PositionData.GetPositionById(positionId);

		if (position != null)
		{
			for (int index = 0; index < position.SkillLocations.Count; index++)
			{
				if (position.SkillLocations[index].ShowLocationId == showLocationId)
				{
					var skill = player.SearchSkill(position.SkillLocations[index].Guid);

					if (skill != null)
						skillIds.Add(skill.ResourceId);
				}
			}
		}
		return skillIds;
	}

	public static List<KodGames.ClientClass.Location> GetBeastLocations(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Location> organLocations = new List<KodGames.ClientClass.Location>();

		var position = player.PositionData.GetPositionById(positionId);
		if (position != null)
		{
			for (int index = 0; index < position.BeastLocations.Count; index++)
			{
				if (position.BeastLocations[index].ShowLocationId == showLocationId)
					organLocations.Add(position.BeastLocations[index]);
			}
		}

		return organLocations;
	}

	public static List<KodGames.ClientClass.Location> GetSkillLocations(KodGames.ClientClass.Player player, int positionId, int showLocationId)
	{
		List<KodGames.ClientClass.Location> skillLocations = new List<KodGames.ClientClass.Location>();

		var position = player.PositionData.GetPositionById(positionId);
		if (position != null)
		{
			for (int index = 0; index < position.SkillLocations.Count; index++)
			{
				if (position.SkillLocations[index].ShowLocationId == showLocationId)
					skillLocations.Add(position.SkillLocations[index]);
			}
		}

		return skillLocations;
	}

	public static bool IsLineUpInParter(KodGames.ClientClass.Player player, KodGames.ClientClass.Avatar avatar)
	{
		if (player == null || avatar == null)
			return false;

		for (int i = 0; i < player.PositionData.Positions.Count; i++)
		{
			var position = player.PositionData.Positions[i];

			for (int j = 0; j < position.Partners.Count; j++)
			{
				if (position.Partners[j].AvatarGuid.Equals(avatar.Guid))
					return true;
			}
		}

		return false;
	}

	public static List<KodGames.ClientClass.Partner> GetLineUpInPartners(KodGames.ClientClass.Player player, KodGames.ClientClass.Avatar avatar)
	{
		List<KodGames.ClientClass.Partner> partners = new List<KodGames.ClientClass.Partner>();

		if (player == null || avatar == null)
			return partners;

		for (int i = 0; i < player.PositionData.Positions.Count; i++)
		{
			var position = player.PositionData.Positions[i];

			for (int j = 0; j < position.Partners.Count; j++)
			{
				if (position.Partners[j].AvatarGuid.Equals(avatar.Guid))
				{
					partners.Add(position.Partners[j]);
					break;
				}
			}
		}

		return partners;
	}

	// 是否已经装备（上阵）
	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, string guid, int resourceId)
	{
		if (player == null || player.PositionData.Positions == null)
			return false;

		for (int i = 0; i < player.PositionData.Positions.Count; i++)
		{
			switch (IDSeg.ToAssetType(resourceId))
			{
				case IDSeg._AssetType.Avatar:

					for (int j = 0; j < player.PositionData.Positions[i].AvatarLocations.Count; j++)
						if (guid.Equals(player.PositionData.Positions[i].AvatarLocations[j].Guid))
							return true;

					break;

				case IDSeg._AssetType.Equipment:

					for (int j = 0; j < player.PositionData.Positions[i].EquipLocations.Count; j++)
						if (guid.Equals(player.PositionData.Positions[i].EquipLocations[j].Guid))
							return true;

					break;

				case IDSeg._AssetType.Dan:

					for (int j = 0; j < player.PositionData.Positions[i].DanLocations.Count; j++)
						if (guid.Equals(player.PositionData.Positions[i].DanLocations[j].Guid))
							return true;

					break;

				case IDSeg._AssetType.CombatTurn:

					for (int j = 0; j < player.PositionData.Positions[i].SkillLocations.Count; j++)
						if (guid.Equals(player.PositionData.Positions[i].SkillLocations[j].Guid))
							return true;

					break;

				case IDSeg._AssetType.Beast:

					for (int j = 0; j < player.PositionData.Positions[i].BeastLocations.Count; j++)
						if (guid.Equals(player.PositionData.Positions[i].BeastLocations[j].Guid))
							return true;

					break;
			}
		}

		return false;
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, string guid, int resourceId)
	{
		List<KodGames.ClientClass.Location> lineUpLocations = new List<KodGames.ClientClass.Location>();

		if (player == null || player.PositionData.Positions == null)
			return lineUpLocations;

		for (int i = 0; i < player.PositionData.Positions.Count; i++)
		{
			var position = player.PositionData.Positions[i];

			switch (IDSeg.ToAssetType(resourceId))
			{
				case IDSeg._AssetType.Avatar:

					for (int j = 0; j < position.AvatarLocations.Count; j++)
						if (guid.Equals(position.AvatarLocations[j].Guid))
						{
							lineUpLocations.Add(position.AvatarLocations[j]);
							break;
						}

					break;

				case IDSeg._AssetType.Equipment:

					for (int j = 0; j < position.EquipLocations.Count; j++)
						if (guid.Equals(position.EquipLocations[j].Guid))
						{
							lineUpLocations.Add(position.EquipLocations[j]);
							break;
						}

					break;

				case IDSeg._AssetType.Dan:

					for (int j = 0; j < position.DanLocations.Count; j++)
						if (guid.Equals(position.DanLocations[j].Guid))
						{
							lineUpLocations.Add(position.DanLocations[j]);
							break;
						}

					break;
				case IDSeg._AssetType.CombatTurn:

					for (int j = 0; j < position.SkillLocations.Count; j++)
						if (guid.Equals(position.SkillLocations[j].Guid))
						{
							lineUpLocations.Add(position.SkillLocations[j]);
							break;
						}

					break;
				case IDSeg._AssetType.Beast:

					for (int j = 0; j < position.BeastLocations.Count; j++)
						if (guid.Equals(position.BeastLocations[j].Guid))
						{
							lineUpLocations.Add(position.BeastLocations[j]);
							break;
						}

					break;

			}
		}

		return lineUpLocations;
	}


	#region 判定是否在特定阵位上阵
	public static bool IsLineUpInSpecialPosition(KodGames.ClientClass.Player player, int positionId, string guid, int resourceId)
	{
		if (player == null)
			return false;

		var position = player.PositionData.GetPositionById(positionId);
		if (position == null)
			return false;

		switch (IDSeg.ToAssetType(resourceId))
		{
			case IDSeg._AssetType.Avatar:

				for (int i = 0; i < position.AvatarLocations.Count; i++)
					if (guid.Equals(position.AvatarLocations[i].Guid))
						return true;
				break;

			case IDSeg._AssetType.Equipment:

				for (int i = 0; i < position.EquipLocations.Count; i++)
					if (guid.Equals(position.EquipLocations[i].Guid))
						return true;
				break;
			case IDSeg._AssetType.Dan:

				for (int i = 0; i < position.DanLocations.Count; i++)
					if (guid.Equals(position.DanLocations[i].Guid))
						return true;
				break;

			case IDSeg._AssetType.CombatTurn:

				for (int i = 0; i < position.SkillLocations.Count; i++)
					if (guid.Equals(position.SkillLocations[i].Guid))
						return true;
				break;
		}

		return false;
	}

	public static bool IsLineUpInSpecialParter(KodGames.ClientClass.Player player, int positionId, KodGames.ClientClass.Avatar avatar)
	{
		if (player == null || avatar == null)
			return false;

		var position = player.PositionData.GetPositionById(positionId);
		if (position == null)
			return false;

		for (int i = 0; i < position.Partners.Count; i++)
		{
			if (avatar.Guid.Equals(position.Partners[i].AvatarGuid))
				return true;
		}

		return false;
	}
	#endregion

	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, KodGames.ClientClass.Avatar avatar)
	{
		return IsLineUpInPosition(player, avatar.Guid, avatar.ResourceId);
	}

	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, KodGames.ClientClass.Equipment equip)
	{
		return IsLineUpInPosition(player, equip.Guid, equip.ResourceId);
	}

	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, KodGames.ClientClass.Dan dan)
	{
		return IsLineUpInPosition(player, dan.Guid, dan.ResourceId);
	}

	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, KodGames.ClientClass.Skill skill)
	{
		return IsLineUpInPosition(player, skill.Guid, skill.ResourceId);
	}

	public static bool IsLineUpInPosition(KodGames.ClientClass.Player player, KodGames.ClientClass.Beast beast)
	{
		return IsLineUpInPosition(player, beast.Guid, beast.ResourceId);
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, KodGames.ClientClass.Avatar avatar)
	{
		return GetLineUpInPositions(player, avatar.Guid, avatar.ResourceId);
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, KodGames.ClientClass.Equipment equip)
	{
		return GetLineUpInPositions(player, equip.Guid, equip.ResourceId);
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, KodGames.ClientClass.Skill skill)
	{
		return GetLineUpInPositions(player, skill.Guid, skill.ResourceId);
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, KodGames.ClientClass.Dan dan)
	{
		return GetLineUpInPositions(player, dan.Guid, dan.ResourceId);
	}

	public static List<KodGames.ClientClass.Location> GetLineUpInPositions(KodGames.ClientClass.Player player, KodGames.ClientClass.Beast beast)
	{
		return GetLineUpInPositions(player, beast.Guid, beast.ResourceId);
	}
	#endregion

	#region Avatar Active Skill
	public static List<KodGames.ClientClass.Skill> GetAvatarActiveSkill(int avatarResourceId, int avatarBreakLevel)
	{
		var activeSkills = new List<KodGames.ClientClass.Skill>();
		var avatarCfg = ConfigDatabase.DefaultCfg.AvatarConfig.GetAvatarById(avatarResourceId);

		foreach (var skillId in avatarCfg.avatarDefaultSkillIds)
		{
			var kd_skill = new KodGames.ClientClass.Skill();
			kd_skill.ResourceId = skillId;
			kd_skill.LevelAttrib.Level = 1;

			activeSkills.Add(kd_skill);
		}

		var avatarCompositeSkill = GetAvatarCompositeSkill(avatarResourceId, avatarBreakLevel);
		if (avatarCompositeSkill != null)
			activeSkills.Add(avatarCompositeSkill);

		return activeSkills;
	}

	public static SkillComposite GetAvatarCompositeSkill(int avatarResourceId, int avatarBreakLevel)
	{
		var avatarCfg = ConfigDatabase.DefaultCfg.AvatarConfig.GetAvatarById(avatarResourceId);
		if (avatarCfg.compositeSkillId == IDSeg.InvalidId)
			return null;

		var skillCfg = ConfigDatabase.DefaultCfg.SkillConfig.GetSkillById(avatarCfg.compositeSkillId);
		if (skillCfg.type == CombatTurn._Type.CompositeSkill)
		{
			var kd_skill = new SkillComposite();
			kd_skill.ResourceId = avatarCfg.compositeSkillId;
			kd_skill.LevelAttrib.Level = avatarCfg.GetAvatarBreakthrough(avatarBreakLevel).compositeSkillLevel;
			kd_skill.AvatarResourceId = avatarResourceId;
			kd_skill.AvatarBreakLevel = avatarBreakLevel;

			return kd_skill;
		}

		return null;
	}

	#endregion
	#region 战力
	public static float CalculatePlayerPower(KodGames.ClientClass.Player player, int positionId)
	{
		float powerValue = 0f;

		if (player == null)
			return -1;

		var position = player.PositionData.GetPositionById(positionId);
		if (position == null)
			return -1;

		var avatarlocations = GetAvatarLocations(player, positionId);

		for (int index = 0; index < avatarlocations.Count; index++)
		{
			var avatar = player.SearchAvatar(avatarlocations[index].Guid);

			var dans = GetLineUpDans(player, positionId, avatarlocations[index].ShowLocationId);

			List<float> values = new List<float>();

			//添加内丹和幻化提供的战力加成
			foreach (var dan in dans)
				values.Add(dan.DanPower);

			values.Add(GetIllusitonPower(player, avatar.ResourceId));

			powerValue += CalculateAvatarPower(avatar, positionId, avatarlocations[index].ShowLocationId, player, values);
		}
		return powerValue;
	}

	public static float GetIllusitonPower(KodGames.ClientClass.Player player, int avatarId)
	{
		if (player == null || avatarId == IDSeg.InvalidId)
			return 0;

		var illusionAvatars = player.IllusionData.illusionAvatars;

		for (int i = 0; i < illusionAvatars.Count; i++)
			if (illusionAvatars[i].recourseId == avatarId)
				return illusionAvatars[i].illusionDanPower;

		return 0;
	}

	public static float CalculateAvatarPower(KodGames.ClientClass.Avatar avatar, int positionId, int showLoactionId, KodGames.ClientClass.Player player, List<float> danValues)
	{
		var _avatar = PlayerDataUtility.GetCalculatorAvatar(avatar, positionId, showLoactionId, player, false);

		var calulateAvatar = ConfigDatabase.DefaultCfg.AttributeCalculator.CalculateAvatarPower(_avatar,
			PlayerDataUtility.GetCheerCalculatorAvatars(player, positionId),
			PlayerDataUtility.GetLineUpAvatarIds(player, positionId),
			danValues
			);
		return calulateAvatar.powerValue;
	}

	//不在阵容上的战力计算
	public static float CalculateAvatarPower(KodGames.ClientClass.Avatar avatar)
	{
		if (avatar == null)
			return 0f;

		//计算经脉
		List<AttributeCalculator.Meridian> meridians = new List<AttributeCalculator.Meridian>();
		for (int index = 0; index < avatar.MeridianDatas.Count; index++)
		{
			List<ClientServerCommon.PropertyModifier> modifiers = new List<ClientServerCommon.PropertyModifier>();
			for (int temp = 0; temp < avatar.MeridianDatas[index].Modifiers.Count; temp++)
			{
				ClientServerCommon.PropertyModifier tempPropertyModifier = new ClientServerCommon.PropertyModifier();
				tempPropertyModifier.attributeType = avatar.MeridianDatas[index].Modifiers[temp].AttributeType;
				tempPropertyModifier.attributeValue = avatar.MeridianDatas[index].Modifiers[temp].AttributeValue;
				tempPropertyModifier.modifyType = avatar.MeridianDatas[index].Modifiers[temp].ModifyType;
				tempPropertyModifier.type = avatar.MeridianDatas[index].Modifiers[temp].Type;

				modifiers.Add(tempPropertyModifier);
			}
			meridians.Add(new AttributeCalculator.Meridian(modifiers, avatar.MeridianDatas[index].BufferId));
		}

		//计算霸气
		List<AttributeCalculator.Domineer> dominners = new List<AttributeCalculator.Domineer>();
		for (int index = 0; index < avatar.Domineer.Domineers.Count; index++)
		{
			dominners.Add(new AttributeCalculator.Domineer(avatar.Domineer.Domineers[index].DomineerId, avatar.Domineer.Domineers[index].Level));
		}

		//***************************************************
		//&&&计算单个卡片的战力
		//&&&包含角色自身、经脉、霸气以及幻化武器的战力统计
		//***************************************************
		//*角色ResuorceId
		//**角色等级
		//***角色突破等级
		//****角色经脉
		//*****角色霸气
		//******角色的幻化武器
		//***************************************************
		return ConfigDatabase.DefaultCfg.AttributeCalculator.GetOneAvatarBasePower(new AttributeCalculator.Avatar(avatar.ResourceId,
								avatar.LevelAttrib.Level,
								avatar.BreakthoughtLevel,
								meridians,
								dominners,
								PlayerDataUtility.GetActiveIllusionIdByAvatarId(SysLocalDataBase.Inst.LocalPlayer, avatar.ResourceId)));

	}

	public static string GetPowerString(int powerValue)
	{
		if (powerValue < 999999)
			return powerValue.ToString();
		else
		{
			int format1 = powerValue / 10000;
			int format2 = powerValue % 10000 / 1000;
			return GameUtility.FormatUIString("UIDlgPlayerAttrTip_PowerMax", format1, format2);
		}
	}

	//根据机关兽装备算出机关兽战力
	public static float CalculateBeastPower(KodGames.ClientClass.Beast beast)
	{
		var breakLevel = ConfigDatabase.DefaultCfg.BeastConfig.GetBreakthoughtAndLevel(beast.ResourceId, beast.BreakthoughtLevel, beast.LevelAttrib.Level);

		float beastEquipPower = 0f;
		for (int i = 0; i < beast.PartIndexs.Count; i++)
		{
			beastEquipPower = beastEquipPower + breakLevel.BeastPartActives[beast.PartIndexs[i] - 1].PartPower;
		}

		return (float)(breakLevel.Power + beastEquipPower);
	}

	#endregion
}